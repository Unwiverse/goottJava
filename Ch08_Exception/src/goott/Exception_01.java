package goott;

/*
 * 에러(error)
 * - 하드웨어 오동작 또는 고장으로 인한 오류.
 * - 에러가 생기면 프로그램 종료
 * - 정상 실행 상태로 못돌아감.
 * 
 * 예외(exception)
 * - 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인한 오류.
 * - 예외가 발생하면 프로그램 종료.
 * - 예외 처리를 추가해 주면 정상 실행 상태로 돌아갈 수 있음.
 * - 프로그램을 위한 보험 처리. 위험한 상황에서 다른 코드를 보호하는 장치.
 * 
 * 예외 종류
 * 1. 일반(컴파일) 예외
 * - 예외 처리 코드가 없다면 컴파일이 안되는 예외.
 * 2. 실행 예외
 * - 예외 처리 코드를 생략하더라고 컴파일이 되는 예외. 즉, 컴파일 하는 과정에서 예외처리 코드를 검사 안하는 예외.
 * - 경험에 따라 예외 처리 코드를 작성할 필요 없음.
 * 
 * 예외 처리의 목적 
 * - 프로그램을 실행할 시 발생할 수 있는 상황들을 미리 정하고 예외가 생겼을 때 대비하는 코드를 작성해 프로그램이
 * 정상적으로 작동하게 하기 위함.
 */

public class Exception_01 {

	public static void main(String[] args) { //10은 0으로 못나눔 ==> 예외처리
		System.out.println("프로그램 시작");
		try {
		int num = 10, num2 = 0; 
		int result = num/num2;
		System.out.println(result);
		} catch(Exception e) {
			System.out.println("똑바로좀 해라");
		} finally { //오류가 있어도 실행시킬 코드
		System.out.println("프로그램 종료");
		}

	}

}
