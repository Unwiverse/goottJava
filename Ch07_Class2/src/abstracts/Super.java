package abstracts;
/*
 * 추상 클래스(abstract class)?
 * 1. 추상 메서드를 포함하는 클래스. 
 * 2. 추상 메서드는 본체가 없는 메서드.
 * 		==> 선언은 돼있는데 코드가 구현안됨.
 * 				껍데기만 있는 메서드.
 * 				예) void display();  //{ } 가 없다
 * 3. 클래스 앞에 abstract 키워드를 붙인다.
 * 4. ==> 추상 메서드를 재정의 안하면 error 발생.
 * 5. 추상 클래스는 객체 생성이 불가능.
 * 		==> 자식 클래스를 대상으로 객체 생성.
 * 		===> 원칙적으로 자식 클래스도 추상임.
 * 				  이유는 추상 클래스를 그대로 상속받앗기 때문임.
 * 				  근데 부모의 추상 메서드를 재정의하면 객체 생성이 가능함.
 * 6. 추상 클래스는 추상 메서드를 가진 클래스를 말함.
 * 7. 일반 멤버면수와 멤버메서드를 가질 수 있음.
 * 8. 그러나 한 개 이상의 추상 메서드는 꼭 있어야됨.
 * 		형식) 
 * 					[접근제한] abstracts class 클래스 이름 {   }
 * 9. 용도: - 응용 프로그램에서 설계와 구현 부분을 클리어해서
 * 					작업 시 쓰임.
 * 				- 추상 클래스를 책의 목차에 비유하면
 * 					서브 클래스는 목차에 따라 완성된 책 같음.
 * 					책을 쓸 때도 목차를 잡아놓고 쓰면 쉽고 
 * 					빠르며 방향이 흐트러지지않는 것처럼 추상 클래스를
 * 					이용하면 응용 프로그램의 설계와 구현을 분리가능.
 * 추상 클래스에서 error 발생 처리법 - 2개
 * 1. 자식 클래스에서 추상 메서드를 재정의
 * 2. 자식 클래스에서 추상 메서드를 재정의하지 않는 경우
 *   	==> 자식 클래스 이름 앞에 abstract 키워드를 붙여야됨.
 */
public abstract class Super { //추상클래스
		int num1;  //인스턴스 멤버변수
		int calc() { //인턴 멤버메서드
			return num1+100;
		}
		abstract void output(); //추상메서드
		
}
